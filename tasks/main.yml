---
# Main tasks file for skel role

# ensure for requirements

## apt packages

- name: "update apt cache"
  become: true
  apt:
    update_cache: yes
    cache_valid_time: 3600
  tags: [ 'packages' ]

- name: "Update apt cache and install myrepo reqirements package"
  become: true
  apt:
    name : '{{ item }}'
    state: 'present'
  with_items:
    - git

# directories

- name: 'Manage skels directories'
  file:
    path: "{{ item.path }}"
    state: "{{ item.state }}"
    owner: "{{ item.owner | default(skel_default_owner) }}"
    group: "{{ item.group | default(skel_default_group) }}"
    mode: "{{ item.mode | default(skel_default_directory_mode) }}"
  when: item.state is defined and item.state == 'directory' or item.state is defined and item.state =='absent'
  with_flattened:
    - "{{ skel_entries }}"
    - "{{ skel_group_entries }}"
    - "{{ skel_host_entries }}"
  tags: [configuration,system,skel]

# git repo clones

- name: "Manage git repository clones"
  git:
    repo: "{{ item.repo }}"
    dest: "{{ item.dest }}"
    clone: "{{ item.clone | default(skel_default_clone) }}"
  when: item.clone is defined
  with_flattened:
    - "{{ skel_entries }}"
    - "{{ skel_group_entries }}"
    - "{{ skel_host_entries }}"
  tags: [configuration,system,skel]

# files

- name: "Manage skels files using touch"
  file:
    path: "{{ item.path }}"
    state: "{{ item.state }}"
    owner: "{{ item.owner | default(skel_default_owner) }}"
    group: "{{ item.group | default(skel_default_group) }}"
    mode: "{{ item.mode | default(skel_default_directory_mode) }}"
  when: item.state is defined and item.state == 'touch'
  with_flattened:
    - "{{ skel_entries }}"
    - "{{ skel_group_entries }}"
    - "{{ skel_host_entries }}"
  tags: [configuration,system,skel]

## copies

- name: 'Manage skels files to copy'
  copy:
    src: "{{ item.src }}"
    dest: "{{ item.path }}"
    owner: "{{ item.owner | default(skel_default_owner) }}"
    group: "{{ item.group | default(skel_default_group) }}"
    mode : "{{ item.mode | default(skel_default_file_mode) }}"
    force: "{{ item.force | default(skel_default_force) }}"
  when: item.state is defined and item.state == 'copy'
  with_flattened:
    - "{{ skel_entries }}"
    - "{{ skel_group_entries }}"
    - "{{ skel_host_entries }}"
  tags: [configuration,system,skel]

## templates

- name: 'Manage skels files to template'
  template:
    src: "{{ item.src }}"
    dest: "{{ item.path }}"
    owner: "{{ item.owner | default(skel_default_owner) }}"
    group: "{{ item.group | default(skel_default_group) }}"
    mode: "{{ item.mode | default(skel_default_file_mode) }}"
  when: item.state is defined and item.state == 'template'
  with_flattened:
    - "{{ skel_entries }}"
    - "{{ skel_group_entries }}"
    - "{{ skel_host_entries }}"
  tags: [configuration,system,skel]

## blockinfile

- name: "Ensure for spefici block of text in a /etc/skel file"
  blockinfile:
    destfile:  "{{ item.path }}"
    owner: "{{ item.owner | default(skel_default_owner) }}"
    group: "{{ item.group | default(skel_default_group) }}"
    mode: "{{ item.mode | default(skel_default_file_mode) }}"
    marker: "{{ item.marker | default(skel_default_blockinfile_marker) }}"
    insertafter: "{{ item.insertafter | default(none) }}"
    block: "{{ item.block }}"
    state: "{{ skel_blockinfile_state }}"
  when: item.type is defined and item.type == 'blockinfile'
  with_flattened:
    - "{{ skel_entries }}"
    - "{{ skel_group_entries }}"
    - "{{ skel_host_entries }}"
  tags: [configuration,system,skel]

# sym links

- name: 'Manage skels links'
  file:
    src: "{{ item.src }}"
    dest: "{{ item.path }}"
    state: "{{ item.state }}"
    owner: "{{ item.owner | default(skel_default_owner) }}"
    group: "{{ item.group | default(skel_default_group) }}"
    mode: "{{ item.mode | default(skel_default_link_mode) }}"
    force: "{{ item.force | default(skel_default_link_force) }}"
  when: item.state is defined and item.state == 'link'
  with_flattened:
    - "{{ skel_entries }}"
    - "{{ skel_group_entries }}"
    - "{{ skel_host_entries }}"
  tags: [configuration,system,skel]

# relative sym links

- name: 'Manage skels links'
  command: 'ln -frs {{ item.link_target }} {{ item.link_name }}'
  args:
    chdir  : '{{ item.link_dir }}'
#    creates: '{{ item.link_dir }}/{{ item.link_name }}'
  when: item.state is defined and item.state == 'relative_link'
  with_flattened:
    - "{{ skel_entries }}"
    - "{{ skel_group_entries }}"
    - "{{ skel_host_entries }}"
  tags: [configuration,system,skel]





